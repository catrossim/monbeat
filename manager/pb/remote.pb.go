// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remote.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResultCode int32

const (
	ResultCode_SUCCESS ResultCode = 0
	ResultCode_FAILURE ResultCode = 1
	ResultCode_UNKNOWN ResultCode = 2
)

var ResultCode_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
	2: "UNKNOWN",
}

var ResultCode_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
	"UNKNOWN": 2,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}

func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{0}
}

type Response struct {
	Code                 ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=pb.ResultCode" json:"code,omitempty"`
	Result               string     `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Timestamp            int64      `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{0}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCode() ResultCode {
	if m != nil {
		return m.Code
	}
	return ResultCode_SUCCESS
}

func (m *Response) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *Response) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{1}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.ResultCode", ResultCode_name, ResultCode_value)
	proto.RegisterType((*Response)(nil), "pb.Response")
	proto.RegisterType((*Chunk)(nil), "pb.Chunk")
}

func init() { proto.RegisterFile("remote.proto", fileDescriptor_eefc82927d57d89b) }

var fileDescriptor_eefc82927d57d89b = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0x97, 0x6e, 0xb6, 0xf6, 0xb3, 0x8c, 0x92, 0xc3, 0x28, 0xd3, 0x43, 0xed, 0x41, 0x8a,
	0x87, 0x0c, 0xb6, 0x5f, 0x20, 0xa5, 0x82, 0x28, 0x55, 0x52, 0x8a, 0x57, 0x6d, 0xfb, 0x59, 0x87,
	0x6b, 0x12, 0xda, 0x14, 0xf4, 0xdf, 0x4b, 0xb3, 0x8d, 0xc1, 0x8e, 0xcf, 0xfb, 0xbd, 0xe4, 0xcd,
	0x03, 0x5e, 0x87, 0xad, 0xd4, 0xc8, 0x54, 0x27, 0xb5, 0xa4, 0x96, 0x2a, 0x97, 0xd7, 0x8d, 0x94,
	0xcd, 0x0e, 0x57, 0x26, 0x29, 0x87, 0xaf, 0x15, 0xb6, 0x4a, 0xff, 0xed, 0x0b, 0x51, 0x0d, 0x97,
	0x1c, 0x7b, 0x25, 0x45, 0x8f, 0x34, 0x82, 0x59, 0x25, 0x6b, 0x0c, 0x48, 0x48, 0xe2, 0xf9, 0x7a,
	0xce, 0x54, 0xc9, 0x38, 0xf6, 0xc3, 0x4e, 0x27, 0xb2, 0x46, 0x6e, 0x6e, 0x74, 0x01, 0x76, 0x67,
	0xb2, 0xc0, 0x0a, 0x49, 0xec, 0xf2, 0x03, 0xd1, 0x1b, 0x70, 0xf5, 0xb6, 0xc5, 0x5e, 0x7f, 0xb6,
	0x2a, 0x98, 0x86, 0x24, 0x9e, 0xf2, 0x53, 0x10, 0xdd, 0xc2, 0x45, 0xf2, 0x3d, 0x88, 0x1f, 0x1a,
	0x80, 0x53, 0x49, 0xa1, 0x51, 0x68, 0xb3, 0xe2, 0xf1, 0x23, 0xde, 0x6f, 0x00, 0x4e, 0x63, 0xf4,
	0x0a, 0x9c, 0xbc, 0x48, 0x92, 0x34, 0xcf, 0xfd, 0xc9, 0x08, 0x8f, 0x0f, 0x4f, 0x2f, 0x05, 0x4f,
	0x7d, 0x32, 0x42, 0x91, 0x3d, 0x67, 0xaf, 0xef, 0x99, 0x6f, 0xad, 0x3f, 0xc0, 0xe6, 0x46, 0x97,
	0x32, 0x98, 0xbd, 0x6d, 0x45, 0x43, 0x17, 0x6c, 0x6f, 0xcb, 0x8e, 0xb6, 0x2c, 0x1d, 0x6d, 0x97,
	0xde, 0xc1, 0xc6, 0x98, 0x46, 0x13, 0x7a, 0x07, 0x4e, 0xfa, 0x8b, 0xd5, 0xa0, 0x91, 0xba, 0xe3,
	0xc9, 0x7c, 0xef, 0xbc, 0x15, 0x93, 0xd2, 0x36, 0xef, 0x6c, 0xfe, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x70, 0x91, 0x59, 0x96, 0x57, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RemoteClient is the client API for Remote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error)
	Execute(ctx context.Context, opts ...grpc.CallOption) (Remote_ExecuteClient, error)
}

type remoteClient struct {
	cc *grpc.ClientConn
}

func NewRemoteClient(cc *grpc.ClientConn) RemoteClient {
	return &remoteClient{cc}
}

func (c *remoteClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Remote/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) Execute(ctx context.Context, opts ...grpc.CallOption) (Remote_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Remote_serviceDesc.Streams[0], "/pb.Remote/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteExecuteClient{stream}
	return x, nil
}

type Remote_ExecuteClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type remoteExecuteClient struct {
	grpc.ClientStream
}

func (x *remoteExecuteClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteExecuteClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteServer is the server API for Remote service.
type RemoteServer interface {
	Ping(context.Context, *empty.Empty) (*Response, error)
	Execute(Remote_ExecuteServer) error
}

func RegisterRemoteServer(s *grpc.Server, srv RemoteServer) {
	s.RegisterService(&_Remote_serviceDesc, srv)
}

func _Remote_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Remote/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteServer).Execute(&remoteExecuteServer{stream})
}

type Remote_ExecuteServer interface {
	SendAndClose(*Response) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type remoteExecuteServer struct {
	grpc.ServerStream
}

func (x *remoteExecuteServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteExecuteServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Remote_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Remote",
	HandlerType: (*RemoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Remote_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _Remote_Execute_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "remote.proto",
}
